// server/src/services/pdf.ts
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

export interface ReportInput {
  sessionId: string;
  candidate?: { name?: string };
  summary: {
    readinessIndex: number; // 0..1
    avgScore: number;       // 0..1
    attempts: number;
    strengths: { topic: string; avg: number }[];
    weaknesses: { topic: string; avg: number }[];
    rubricAverages: {
      total: number; // 0..1
      breakdown: { criterion: string; score: number }[];
    };
  };
}

export async function buildReportPdf(input: ReportInput): Promise<Uint8Array> {
  const pdf = await PDFDocument.create();
  const page = pdf.addPage([612, 792]); // Letter
  const { width, height } = page.getSize();

  const font = await pdf.embedFont(StandardFonts.Helvetica);
  const fontBold = await pdf.embedFont(StandardFonts.HelveticaBold);

  const drawText = (text: string, x: number, y: number, size = 12, bold = false) => {
    page.drawText(text, { x, y, size, font: bold ? fontBold : font, color: rgb(1, 1, 1) });
  };

  // Background
  page.drawRectangle({ x: 0, y: 0, width, height, color: rgb(17/255, 24/255, 39/255) });

  // Header
  drawText("InterviewPilot â€“ Mock Interview Report", 48, height - 64, 20, true);
  drawText(`Session: ${input.sessionId}`, 48, height - 88, 10);

  // Summary
  const s = input.summary;
  const toPct = (v: number) => Math.round(v * 100);

  drawText("Summary", 48, height - 130, 14, true);
  drawText(`Readiness Index: ${toPct(s.readinessIndex)}%`, 48, height - 150);
  drawText(`Average Score: ${toPct(s.avgScore)}%`, 48, height - 168);
  drawText(`Attempts: ${s.attempts}`, 48, height - 186);

  // Strengths / Weaknesses
  drawText("Strengths", 300, height - 130, 14, true);
  let y1 = height - 150;
  (s.strengths || []).slice(0, 5).forEach((t) => {
    drawText(`${t.topic}: ${toPct(t.avg)}%`, 300, y1); y1 -= 18;
  });

  drawText("Weaknesses", 300, y1 - 12, 14, true);
  let y2 = y1 - 32;
  (s.weaknesses || []).slice(0, 5).forEach((t) => {
    drawText(`${t.topic}: ${toPct(t.avg)}%`, 300, y2); y2 -= 18;
  });

  // Rubric breakdown
  drawText("Rubric Breakdown", 48, height - 240, 14, true);
  let y3 = height - 260;
  (s.rubricAverages.breakdown || []).forEach((r) => {
    drawText(`${r.criterion}: ${toPct(r.score)}%`, 48, y3); y3 -= 18;
  });

  // Footer
  drawText("Generated by InterviewPilot", 48, 32, 10);
  drawText("https://interviewpilot", width - 200, 32, 10);

  const bytes = await pdf.save();
  return bytes;
}
